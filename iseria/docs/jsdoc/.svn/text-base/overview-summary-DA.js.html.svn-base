<!doctype html public "-//W3C//DTD HTML 4.0 Frameset//EN""http://www.w3.org/TR/REC-html40/frameset.dtd">
<html>
<head>
<title>
 Overview
</title>
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script>
function asd() {
	
		parent.document.title="DA.js Overview";
	
}
</script>
</head>
<body bgcolor="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<a name="navbar_top"><!-- --></a>
<table border="0" width="100%" cellpadding="1" cellspacing="0">
<tr>
<td colspan=2 bgcolor="#EEEEFF" class="NavBarCell1">
<a name="navbar_top_firstrow"><!-- --></a>
<table border="0" cellpadding="0" cellspacing="3">
  <tr align="center" valign="top">
  
  
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td>
  <td bgcolor="#FFFFFF" class="NavBarCell1Rev">	&nbsp;<font class="NavBarFont1Rev"><b>File</b></font>&nbsp;</td>
  

  <td bgcolor="#FFFFFF" class="NavBarCell1"> 	<font class="NavBarFont1">Class</font>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="index-all.html"--><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td>
  </tr>
</table>
</td>
<td bgcolor="#EEEEFF" align="right" valign="top">
<em>
<b></b></em>
</td>
</tr>

<tr>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</font></td>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
  <a href="index.html" target="_top"><b>FRAMES</b></a>  &nbsp;
&nbsp;<a href="overview-summary.html" target="_top"><b>NO FRAMES</b></a>
&nbsp;&nbsp;
<script>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</script>
<noscript>
<a href="allclasses-noframe.html" target=""><b>All Classes</b></a>
</noscript>
</font></td>
</tr>
</table>
<!-- =========== END OF NAVBAR =========== -->

<hr>
<center>
	
	   <h2>DA.js</h2>
	
</center>

	


<h4>Summary</h4>
<p>
	
		No overview generated for 'DA.js'<BR/><BR/>
	
</p>

<hr>



<!-- ========== METHOD SUMMARY =========== -->

<!-- ========== END METHOD SUMMARY =========== -->


        <pre class="sourceview"><span class="comment">/*
Copyright (c) 2007, DreamArts. All rights reserved.
TODO: message
version: ??
*/</span>

<span class="comment">/**
 * The DA object is the single global object used by
 * DreamArts RIA Javascript applications.
 * 
 * <span class="attrib">@module</span> DA
 * <span class="attrib">@title</span> DA Global
 */</span>

<span class="reserved">if</span> (typeof DA == <span class="literal">"undefined"</span>) {
    <span class="comment">/**
     * The DA global namespace.
     */</span>
    var DA = {};
    DA.widget = {};
    DA.vars = {};
    DA.util = {};
    DA.file = {};
    <span class="comment">// Empty logger; this should be set by clients later</span>
    DA.log = <span class="reserved">function</span>(message, category, source) {
        
    };

} <span class="reserved">else</span> {
   alert(<span class="literal">"Warning: Global object 'DA' is being defined twice!"</span>);
}

DA.vars = {
    imgRdir: <span class="literal">'/images/ja'</span>,
    
    cgiRdir: <span class="literal">'/cgi-bin'</span>
};

DA.util = {
    isNull: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (obj === null) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },
    
    isUndefined: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (obj == undefined || obj == <span class="literal">""</span>) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },
    
    isEmpty: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (DA.util.isNull(obj) || DA.util.isUndefined(obj)) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },

    isNumber: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (typeof(obj) == <span class="literal">'number'</span> &amp;&amp; isFinite(obj)) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },
    
    isString: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (typeof(obj) == <span class="literal">'string'</span>) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },
    
    isObject: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (typeof obj == <span class="literal">'object'</span>) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },
    
    isFunction: <span class="reserved">function</span>(obj) {
        <span class="reserved">if</span> (typeof obj == <span class="literal">'function'</span>) {
            <span class="reserved">return</span> true;
        } <span class="reserved">else</span> {
            <span class="reserved">return</span> false;
        }
    },
    
    encode: <span class="reserved">function</span>(str, cr, sq) {
        var buf = str;
        <span class="reserved">if</span> (DA.util.isString(str)) {
            buf = buf.replace(/&amp;/g, <span class="literal">"&amp;amp;"</span>);
            buf = buf.replace(/<span class="literal">"/g, "</span>&amp;quot;<span class="literal">");
            buf = buf.replace(/&lt;/g, "</span>&amp;lt;<span class="literal">");
            buf = buf.replace(/&gt;/g, "</span>&amp;gt;<span class="literal">");
            if (sq == 1) {
                buf = buf.replace(/'/g, "</span>&amp;squo;<span class="literal">")
            }
            if (cr == 1) {
                buf = buf.replace(/(\r\n|[\r\n])/g, "</span>&lt;br&gt;<span class="literal">");
            } else if (cr == 2) {
                buf = buf.replace(/([^\r\n]+)(\r\n|$)/g, "</span>&lt;p&gt;$1&lt;/p&gt;$2<span class="literal">");
                buf = buf.replace(/(^|\r\n)(\r\n)/mg, "</span>$1&lt;p&gt;&amp;nbsp;&lt;/p&gt;$2<span class="literal">");
            }
        }
        return buf;
    },
    
    decode: function(str, cr, sq) {
        var buf = str;
        if (DA.util.isString(str)) {
            buf = buf.replace(/&amp;lt;/g, "</span>&lt;<span class="literal">");
            buf = buf.replace(/&amp;gt;/g, "</span>&gt;<span class="literal">");
            buf = buf.replace(/&amp;quot;/g, "</span>\<span class="literal">""</span>);
            <span class="reserved">if</span> (sq == 1) {
                buf = buf.replace(/&amp;squo;/g, <span class="literal">"'"</span>);
            }
            buf = buf.replace(/&amp;amp;/g, <span class="literal">"&amp;"</span>);
            <span class="reserved">if</span> (cr == 1) {
                buf = buf.replace(/&lt;br&gt;/g, <span class="literal">"\r\n"</span>);
            } <span class="reserved">else</span> <span class="reserved">if</span> (cr == 2) {
                buf = buf.replace(/&lt;p&gt;\&amp;nbsp\;&lt;\/p&gt;([\r\n]|$)?/gi, <span class="literal">"$1"</span>);
                buf = buf.replace(/&lt;p&gt;([^&lt;&gt;]*)&lt;\/p&gt;([\r\n]|$)?/gi, <span class="literal">"$1$2"</span>);
            }
        }
        <span class="reserved">return</span> buf;
    },
    
    escape: <span class="reserved">function</span>(str) {
        var buf = str;
        <span class="reserved">if</span> (DA.util.isString(str)) {
            buf = buf.replace(/\\/, <span class="literal">"\\\\"</span>);
            buf = buf.replace(/<span class="literal">"/, "</span>\\\<span class="literal">""</span>);
        }
        <span class="reserved">return</span> buf;
    },
    
    unescape: <span class="reserved">function</span>(str) {
        var buf = str;
        <span class="reserved">if</span> (DA.util.isString(str)) {
            buf = buf.replace(/\\\<span class="literal">"/, "</span>\<span class="literal">""</span>);
            buf = buf.replace(/\\\\/, <span class="literal">"\\"</span>);
        }
        <span class="reserved">return</span> buf;
    },
    
    warn: <span class="reserved">function</span>(str) {
        alert(str);
    },
    
    error: <span class="reserved">function</span>(str) {
        alert(str);
    },
    
    lockData: {},

    lock: <span class="reserved">function</span>(name) {
        <span class="reserved">if</span> (<span class="reserved">this</span>.lockData[name]) {
            <span class="reserved">return</span> false;
        } <span class="reserved">else</span> {
            <span class="reserved">this</span>.lockData[name] = true;
            <span class="reserved">return</span> true;
        }
    },
    
    unlock: <span class="reserved">function</span>(name) {
        delete <span class="reserved">this</span>.lockData[name];
        <span class="reserved">return</span> true;
    },
    
    parseJson: <span class="reserved">function</span>(jsonText) {
        try {
            <span class="reserved">return</span> eval(<span class="literal">'('</span>+ jsonText +<span class="literal">')'</span>);
        } catch(e) {
            <span class="reserved">return</span> undefined;
        }
    },

    <span class="comment">/**
     * Returns the time difference in milliseconds between the 2 given 
     * Date objects.
     * <span class="attrib">@param</span> start (Javascript Date object)
     * <span class="attrib">@param</span> end   (Javascript Date object) if not specified, defaults to current
     * <span class="attrib">@return</span> difference in milliseconds
     * <span class="attrib">@type</span> Number
     */</span>
    time_diff: <span class="reserved">function</span> (start <span class="comment">/*JS Date object*/</span>, end <span class="comment">/*JS Date object*/</span>) {
        <span class="comment">// TODO: Are further null-checks needed?</span>
        <span class="reserved">return</span> (end? end.getTime() : new Date().getTime()) - start.getTime();
    }

};

<span class="comment">/*
 * Window Controler
 */</span>
DA.windowController = {
    data: [],

    winOpen: <span class="reserved">function</span>(url, name, width, height) {
        var status = <span class="literal">'width='</span> + width + <span class="literal">',height='</span> + height
                   + <span class="literal">',resizable=yes,scrollbars=yes,location=yes'</span>
                   + <span class="literal">',menubar=yes,toolbar=yes,statusbar=yes'</span>;
        
        <span class="reserved">this</span>.data[<span class="reserved">this</span>.data.length] = window.open(url, name, status);
    },
    
    winOpenCustom: <span class="reserved">function</span>(url, name, status) {
        <span class="reserved">this</span>.data[<span class="reserved">this</span>.data.lenbth] = window.open(url, name, status);
    },
    
    allClose: <span class="reserved">function</span>() {
        <span class="reserved">for</span> (var i = 0; i &lt; <span class="reserved">this</span>.data.length; i ++) {
            <span class="reserved">if</span> (<span class="reserved">this</span>.data[i]) {
                try {
                    <span class="reserved">this</span>.data[i][<span class="literal">'object'</span>].windowController.allClose();
                } catch(e) {
                }
                try {
                    <span class="reserved">this</span>.data[i][<span class="literal">'object'</span>].close();
                } catch(e) {
                }
            }
        }
    }
    
};

<span class="comment">/*
 * BrowserDetect2.0 as copied from the website of PPK (Peter-Paul Koch)
 * http://www.quirksmode.org/
 *
 * Global object that can provide information about which browser we
 * are running. Please note that this needs to be maintained.
 */</span>
var BrowserDetect = {
	init: <span class="reserved">function</span> () {
		<span class="reserved">this</span>.browser = <span class="reserved">this</span>.searchString(<span class="reserved">this</span>.dataBrowser) || <span class="literal">"An unknown browser"</span>;
		<span class="reserved">this</span>.version = <span class="reserved">this</span>.searchVersion(navigator.userAgent)
			|| <span class="reserved">this</span>.searchVersion(navigator.appVersion)
			|| <span class="literal">"an unknown version"</span>;
		<span class="reserved">this</span>.OS = <span class="reserved">this</span>.searchString(<span class="reserved">this</span>.dataOS) || <span class="literal">"an unknown OS"</span>;
	},
	searchString: <span class="reserved">function</span> (data) {
		<span class="reserved">for</span> (var i=0;i&lt;data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			<span class="reserved">this</span>.versionSearchString = data[i].versionSearch || data[i].identity;
			<span class="reserved">if</span> (dataString) {
				<span class="reserved">if</span> (dataString.indexOf(data[i].subString) != -1)
					<span class="reserved">return</span> data[i].identity;
			}
			<span class="reserved">else</span> <span class="reserved">if</span> (dataProp)
				<span class="reserved">return</span> data[i].identity;
		}
	},
	searchVersion: <span class="reserved">function</span> (dataString) {
		var index = dataString.indexOf(<span class="reserved">this</span>.versionSearchString);
		<span class="reserved">if</span> (index == -1) <span class="reserved">return</span>;
		<span class="reserved">return</span> parseFloat(dataString.substring(index+<span class="reserved">this</span>.versionSearchString.length+1));
	},
	dataBrowser: [
		{ 	string: navigator.userAgent,
			subString: <span class="literal">"OmniWeb"</span>,
			versionSearch: <span class="literal">"OmniWeb/"</span>,
			identity: <span class="literal">"OmniWeb"</span>
		},
		{
			string: navigator.vendor,
			subString: <span class="literal">"Apple"</span>,
			identity: <span class="literal">"Safari"</span>
		},
		{
			prop: window.opera,
			identity: <span class="literal">"Opera"</span>
		},
		{
			string: navigator.vendor,
			subString: <span class="literal">"iCab"</span>,
			identity: <span class="literal">"iCab"</span>
		},
		{
			string: navigator.vendor,
			subString: <span class="literal">"KDE"</span>,
			identity: <span class="literal">"Konqueror"</span>
		},
		{
			string: navigator.userAgent,
			subString: <span class="literal">"Firefox"</span>,
			identity: <span class="literal">"Firefox"</span>
		},
		{
			string: navigator.vendor,
			subString: <span class="literal">"Camino"</span>,
			identity: <span class="literal">"Camino"</span>
		},
		{		<span class="comment">// for newer Netscapes (6+)</span>
			string: navigator.userAgent,
			subString: <span class="literal">"Netscape"</span>,
			identity: <span class="literal">"Netscape"</span>
		},
		{
			string: navigator.userAgent,
			subString: <span class="literal">"MSIE"</span>,
			identity: <span class="literal">"Explorer"</span>,
			versionSearch: <span class="literal">"MSIE"</span>
		},
		{
			string: navigator.userAgent,
			subString: <span class="literal">"Gecko"</span>,
			identity: <span class="literal">"Mozilla"</span>,
			versionSearch: <span class="literal">"rv"</span>
		},
		{ 		<span class="comment">// for older Netscapes (4-)</span>
			string: navigator.userAgent,
			subString: <span class="literal">"Mozilla"</span>,
			identity: <span class="literal">"Netscape"</span>,
			versionSearch: <span class="literal">"Mozilla"</span>
		}
	],
	dataOS : [
		{
			string: navigator.platform,
			subString: <span class="literal">"Win"</span>,
			identity: <span class="literal">"Windows"</span>
		},
		{
			string: navigator.platform,
			subString: <span class="literal">"Mac"</span>,
			identity: <span class="literal">"Mac"</span>
		},
		{
			string: navigator.platform,
			subString: <span class="literal">"Linux"</span>,
			identity: <span class="literal">"Linux"</span>
		}
	]

};
BrowserDetect.init();

</pre>
	<hr>



<!-- ========== START OF NAVBAR ========== -->
<a name="navbar_top"><!-- --></a>
<table border="0" width="100%" cellpadding="1" cellspacing="0">
<tr>
<td colspan=2 bgcolor="#EEEEFF" class="NavBarCell1">
<a name="navbar_top_firstrow"><!-- --></a>
<table border="0" cellpadding="0" cellspacing="3">
  <tr align="center" valign="top">
  
  
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td>
  <td bgcolor="#FFFFFF" class="NavBarCell1Rev">	&nbsp;<font class="NavBarFont1Rev"><b>File</b></font>&nbsp;</td>
  

  <td bgcolor="#FFFFFF" class="NavBarCell1"> <font class="NavBarFont1">Class</font>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="index-all.html"--><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td>
  </tr>
</table>
</td>
<td bgcolor="#EEEEFF" align="right" valign="top"><em>
<b></b></em>
</td>
</tr>

<tr>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</font></td>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
  <a href="index.html" target="_top"><b>FRAMES</b></a>  &nbsp;
&nbsp;<a href="overview-summary.html" target="_top"><b>NO FRAMES</b></a>
&nbsp;&nbsp;
<script>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</script>
<noscript>
<a href="allclasses-noframe.html" target=""><b>All Classes</b></a>
</noscript>
</font></td>
</tr>
</table>
<!-- =========== END OF NAVBAR =========== -->

<hr>
<font size="-1">

</font>
<div class="jsdoc_ctime">Documentation generated by <a href="http://jsdoc.sourceforge.net/" target="_parent">JSDoc</a> on Mon Mar 26 12:11:18 2007</div>
</body>
</html>
