<!doctype html public "-//W3C//DTD HTML 4.0 Frameset//EN""http://www.w3.org/TR/REC-html40/frameset.dtd">
<html>
<head>
<title>
 Overview
</title>
<link rel ="stylesheet" type="text/css" href="stylesheet.css" title="Style">
<script>
function asd() {
	
		parent.document.title="virtual-scroll.js Overview";
	
}
</script>
</head>
<body bgcolor="white" onload="asd();">

<!-- ========== START OF NAVBAR ========== -->
<a name="navbar_top"><!-- --></a>
<table border="0" width="100%" cellpadding="1" cellspacing="0">
<tr>
<td colspan=2 bgcolor="#EEEEFF" class="NavBarCell1">
<a name="navbar_top_firstrow"><!-- --></a>
<table border="0" cellpadding="0" cellspacing="3">
  <tr align="center" valign="top">
  
  
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td>
  <td bgcolor="#FFFFFF" class="NavBarCell1Rev">	&nbsp;<font class="NavBarFont1Rev"><b>File</b></font>&nbsp;</td>
  

  <td bgcolor="#FFFFFF" class="NavBarCell1"> 	<font class="NavBarFont1">Class</font>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="index-all.html"--><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td>
  </tr>
</table>
</td>
<td bgcolor="#EEEEFF" align="right" valign="top">
<em>
<b></b></em>
</td>
</tr>

<tr>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</font></td>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
  <a href="index.html" target="_top"><b>FRAMES</b></a>  &nbsp;
&nbsp;<a href="overview-summary.html" target="_top"><b>NO FRAMES</b></a>
&nbsp;&nbsp;
<script>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</script>
<noscript>
<a href="allclasses-noframe.html" target=""><b>All Classes</b></a>
</noscript>
</font></td>
</tr>
</table>
<!-- =========== END OF NAVBAR =========== -->

<hr>
<center>
	
	   <h2>virtual-scroll.js</h2>
	
</center>

	


<h4>Summary</h4>
<p>
	
		No overview generated for 'virtual-scroll.js'<BR/><BR/>
	
</p>

<hr>


    <table border="1" cellpadding="3" cellspacing="0" width="100%">
    <tr bgcolor="#CCCCFF" class="TableHeadingColor">
    <td colspan=2><font size="+2">
    
        <b>Class Summary</b>
    
    </font></td>
    </tr>
    
    <tr bgcolor="white" class="TableRowColor">
    <td width="15%"><b><a href="DA/widget/VirtualScrollingTable.html">DA.widget.VirtualScrollingTable</a></b></td>
    <td>VirtualScrollingTable
 </td>
    </tr>
    
    </table>
    <hr/> 


<!-- ========== METHOD SUMMARY =========== -->

<!-- ========== END METHOD SUMMARY =========== -->


        <pre class="sourceview"><span class="comment">/*
Copyright (c) 2007, DreamArts. All rights reserved.
TODO: message
version: ??
*/</span>

<span class="comment">/**
 * The virtual scroll widget is an extension of OpenRico's
 * LiveGrid, that uses JSON and is customized for DA's CGIs.
 * 
 * <span class="attrib">@module</span> grid
 * <span class="attrib">@title</span> Virtual Scrolling Widget
 * <span class="attrib">@requires</span> DA, rico, prototype
 * <span class="attrib">@namespace</span> DA.widget
 */</span>

<span class="comment">/**
 * Builds a ready-to-use Virtual-Scrolling LiveGrid.
 *
 * <span class="attrib">@class</span> VirtualScrollingTable
 * <span class="attrib">@uses</span> Rico LiveGrid DA
 * <span class="attrib">@constructor</span>
 * <span class="attrib">@param</span> {string|HTMLElement} elem The id of the element, or the element
 *        itself that the GRID will be inserted into.
 * <span class="attrib">@param</span> config object
 */</span>
DA.widget.VirtualScrollingTable = <span class="reserved">function</span>(params) {

    <span class="reserved">if</span> (<span class="literal">'function'</span> != typeof <span class="reserved">this</span>.initialize) {
        <span class="comment">// TODO: handle prototype inheritance error</span>
        throw <span class="literal">"error! LiveGrid not inherited."</span>;
    }
    
    <span class="comment">// default parameters</span>
    var _params = {
        visibleRows:      10,   <span class="comment">// default</span>
        totalRows:        1000, <span class="comment">// TODO: hard-coded guess</span>
        resizableColumns: true
    };

    Object.extend(_params, params || {});

    <span class="reserved">this</span>.jsonIO = new DA.io.JsonIO(_params.url, _params.urlParams); <span class="comment">// TODO: check for url!</span>

    <span class="comment">// TODO: null checks?</span>
    var me = <span class="reserved">this</span>; <span class="comment">// TODO: closure-safe?</span>
    <span class="reserved">this</span>.jsonIO.callback = <span class="reserved">function</span>(response) {
        me.ajaxUpdate(response);
    };

    <span class="comment">// Call Rico.LiveGrid's initialize method...</span>
    <span class="reserved">this</span>.initialize(
        _params.elem,
        _params.visibleRows,
        _params.totalRows,
        _params.url, 
        Object.extend(_params.liveGridOptions || {}, {
            prefetchBuffer:   true,
            sortAscendImg:    <span class="literal">'/images/sort_asec.gif'</span>, <span class="comment">// TODO path?</span>
            sortDescendImg:   <span class="literal">'/images/sort_desc.gif'</span>,
            sortImageHeight:  <span class="literal">'10px'</span>,
            onRefreshComplete: <span class="reserved">function</span>() {
                me.scroller.updateSize();
            }
        })
    );
  
    <span class="reserved">if</span> (_params.resizableColumns) {
        <span class="comment">// header handles</span>
        var hHndls = DA.tableutils.resizeHandles( 
           $(_params.elem + <span class="literal">"_header"</span>),  <span class="comment">// FIXME:</span>
           { minWidth: 30 }              <span class="comment">//  hardcoding</span>
        );
        var hndls  = DA.tableutils.resizeHandles( $(_params.elem), { minWidth: 30 } );
       
        document.getElementsByClassName(<span class="literal">"da_columnResizer"</span>).each(<span class="reserved">function</span>(el, i){
            <span class="comment">//var i = j - 1; // ignore the first resizer</span>
            <span class="reserved">if</span> (hndls[i]) {
              new DA.widget.TwoColumnResizeHandle( $(_params.elem), el, [hHndls[i], hndls[i]], { 
                  minWidth: 30
              });
            }
        });
    }
};




<span class="comment">// TODO: formalize dependency checking scheme</span>
<span class="reserved">if</span> ( <span class="literal">'undefined'</span> == typeof Rico || 
     <span class="literal">'undefined'</span> == typeof Rico.LiveGrid ||  
     <span class="literal">'undefined'</span> == typeof Rico.LiveGridBuffer ||
     <span class="literal">'undefined'</span> == typeof Rico.TableColumn) {
    <span class="comment">// RICO not found, we cannot continue.</span>
    alert(<span class="literal">"DEPENDENCY ERROR: RICO not found, we cannot continue"</span>);
}

<span class="comment">// TODO: Right now, we just steal the Rico construtor and overwrite whatever</span>
<span class="comment">//       we like.</span>
DA.widget.VirtualScrollingTable.<span class="reserved">prototype</span> = Rico.LiveGrid.<span class="reserved">prototype</span>;

<span class="comment">/**
 * &lt;b&gt;TENTATIVE METHOD &lt;/b&gt;&lt;br/&gt;
 * Wrapper to update the livegrid.
 * <span class="attrib">@method</span> update
 * <span class="attrib">@param</span> params Object (hash) // TODO: comments
 */</span>
DA.widget.VirtualScrollingTable.<span class="reserved">prototype</span>.update = <span class="reserved">function</span>(params) {
    Object.extend(
        <span class="reserved">this</span>.jsonIO.defaultParams, 
        params || {} <span class="comment">// TODO: null check really needed? check with prototype</span>
    ); 
    <span class="reserved">this</span>.resetContents();
    <span class="reserved">this</span>.requestContentRefresh(0);
    
};

<span class="comment">/**
 * LIBRARY METHOD OVERWRITE!  We are changing Rico by doing this.
 * Our very own loadRows implementation. 
 * &lt;p&gt;
 * FIXME: This contains mailer-specific code!
 *        This should be made general as soon as Kadowaki-san
 *        implements an Array-of-Arrays protocol.
 * 
 * <span class="attrib">@method</span> loadRows
 * <span class="attrib">@private</span> ? // TODO: How does one classify such methods?
 * <span class="attrib">@param</span> obj Object an object retrieved by eval'ing the JSON response
 */</span>
Rico.LiveGridBuffer.<span class="reserved">prototype</span>.loadRows = <span class="reserved">function</span>(obj) {

    <span class="comment">// FIXME: Mailer-specific code!</span>
    var totalMessages = obj.total.messages; <span class="comment">// TODO: null checks...</span>
    <span class="reserved">this</span>.metaData.setTotalRows( totalMessages ? totalMessages : 0 ); <span class="comment">// TODO: error handling</span>

    <span class="comment">// FIXME: Mailer-specific code!</span>
    <span class="comment">// DA_DEBUG_START</span>
    var __start_time = new Date();
    <span class="comment">// DA_DEBUG_END</span>
    var ret = obj.mail_list ? obj.mail_list.map( <span class="reserved">function</span>(mail) {
        <span class="reserved">return</span> [
            <span class="literal">'&lt;div class="da_liveGridCell" __hack_da_mail_uid="'</span> + mail.uid + <span class="literal">'"&gt;'</span>+mail.subject+<span class="literal">'&lt;/div&gt;'</span>,
            <span class="literal">'&lt;div class="da_liveGridCell"&gt;'</span>+mail.from+<span class="literal">'&lt;/div&gt;'</span>,
            <span class="literal">'&lt;div class="da_liveGridCell"&gt;'</span>+mail.to+<span class="literal">'&lt;/div&gt;'</span>,
            <span class="literal">'&lt;div class="da_liveGridCell"&gt;'</span>+mail[<span class="literal">"date"</span>]+<span class="literal">'&lt;/div&gt;'</span>
        ];
    }) : [] ;
   
    <span class="comment">/*
    var mail_list = obj.mail_list;
    var list_length = mail_list.length;
    var ret = new Array(list_length);
    for (var i=0; i&lt;list_length; i++) {
        var mail = mail_list[i];
        ret[i] = [
            '&lt;div class="da_liveGridCell"&gt;'+mail.subject+'&lt;/div&gt;',
            '&lt;div class="da_liveGridCell"&gt;'+mail.from+'&lt;/div&gt;',
            '&lt;div class="da_liveGridCell"&gt;'+mail.to+'&lt;/div&gt;',
            '&lt;div class="da_liveGridCell"&gt;'+mail["date"]+'&lt;/div&gt;',
            '&lt;div class="da_liveGridCell"&gt;'+mail.priority+'&lt;/div&gt;'
        ];
    }
    */</span>

    <span class="comment">// DA_DEBUG_START</span>
    DA.log(<span class="literal">"LiveGridBuffer#loadRows: AoH-&gt;AoA conversion took: "</span> + 
           DA.util.time_diff(__start_time) +<span class="literal">"ms"</span>, 
           <span class="literal">"time"</span>, <span class="literal">"virtual-scroll.js"</span>);
    <span class="comment">// DA_DEBUG_END</span>

    <span class="reserved">return</span> ret;
    <span class="comment">// TODO: Add a non-rubyish version so that we can benchmark them</span>

};


<span class="comment">/**
 * LIBRARY METHOD OVERWRITE!  We are changing Rico by doing this.
 * Just glue code.
 *
 * <span class="attrib">@method</span> initAjax
 * <span class="attrib">@private</span> ? // TODO: How does one classify such methods?
 * <span class="attrib">@param</span> url String the CGI to use.
 */</span>
Rico.LiveGrid.<span class="reserved">prototype</span>.initAjax = <span class="reserved">function</span>(url) { <span class="comment">/*INTENTIONALLY EMPTY*/</span> };


<span class="comment">// Need to use kadowaki-san's sorting identifiers</span>
<span class="comment">// LIBRARY CONSTANT OVERWRITE!  We are changing Rico by doing this.</span>
Rico.TableColumn.SORT_ASC  = <span class="literal">"asec"</span>;
Rico.TableColumn.SORT_DESC = <span class="literal">"desc"</span>;


<span class="comment">// </span>
<span class="comment">/**
 * LIBRARY METHOD OVERWRITE!  We are changing Rico by doing this.
 * Most of this function is just copied from the original as it was 
 * difficult to remove it.
 *
 * <span class="attrib">@method</span> fetchBuffer
 * <span class="attrib">@private</span> ? // TODO: How does one classify such methods?
 * <span class="attrib">@param</span> offset Rico stuff. Ask them, not me... ;-)
 */</span>
Rico.LiveGrid.<span class="reserved">prototype</span>.fetchBuffer = <span class="reserved">function</span>(offset) {

    <span class="comment">// The following is just copied straight from Rico</span>
    <span class="comment">// START:</span>
    <span class="reserved">if</span> ( <span class="reserved">this</span>.buffer.isInRange(offset) &amp;&amp;
       !<span class="reserved">this</span>.buffer.isNearingLimit(offset)) {
       <span class="reserved">return</span>;
    }
    <span class="reserved">if</span> (<span class="reserved">this</span>.processingRequest) {
        <span class="reserved">this</span>.unprocessedRequest = new Rico.LiveGridRequest(offset);
       <span class="reserved">return</span>;
    }
    var bufferStartPos = <span class="reserved">this</span>.buffer.getFetchOffset(offset);
    <span class="reserved">this</span>.processingRequest = new Rico.LiveGridRequest(offset);
    <span class="reserved">this</span>.processingRequest.bufferOffset = bufferStartPos;   
    var fetchSize = <span class="reserved">this</span>.buffer.getFetchSize(offset);
    <span class="comment">// END</span>
   
    <span class="comment">// TODO: start_sno, end_sno, sort, sort_key are all CGI-specific</span>

    var params = {
      start_sno: (bufferStartPos + 1),          <span class="comment">// TODO: start_sno needs to be taken out?</span>
      end_sno: (bufferStartPos + fetchSize)     <span class="comment">// TODO: end_sno needs to be taken out?   </span>
    }

    <span class="reserved">if</span> (<span class="reserved">this</span>.sortCol) {
      params.sort_key = <span class="reserved">this</span>.sortCol;           <span class="comment">// TODO: sort_key needs to be taken out?   </span>
      params.sort = <span class="reserved">this</span>.sortDir;               <span class="comment">// TODO: sort needs to be taken out?   </span>
    } 

    <span class="reserved">this</span>.jsonIO.execute( params );
    <span class="reserved">this</span>.timeoutHandler = setTimeout( <span class="reserved">this</span>.handleTimedOut.bind(<span class="reserved">this</span>), <span class="reserved">this</span>.options.bufferTimeout);

};

Rico.LiveGrid.<span class="reserved">prototype</span>.addLiveGridHtml = <span class="reserved">function</span>() {
    <span class="comment">// Check to see if need to create a header table.</span>
    <span class="reserved">if</span> (<span class="reserved">this</span>.table.getElementsByTagName(<span class="literal">"thead"</span>).length &gt; 0){
      <span class="comment">// Create Table this.tableId+'_header'</span>
      var tableHeader = <span class="reserved">this</span>.table.cloneNode(true);
      tableHeader.setAttribute(<span class="literal">'id'</span>, <span class="reserved">this</span>.tableId+<span class="literal">'_header'</span>);
      tableHeader.setAttribute(<span class="literal">'class'</span>, <span class="reserved">this</span>.table.className+<span class="literal">'_header'</span>);

      <span class="comment">// Clean up and insert</span>
      <span class="reserved">for</span>( var i = 0; i &lt; tableHeader.tBodies.length; i++ ) 
      tableHeader.removeChild(tableHeader.tBodies[i]);
      <span class="reserved">this</span>.table.deleteTHead();
      <span class="reserved">this</span>.table.parentNode.insertBefore(tableHeader,<span class="reserved">this</span>.table);
    }

    new Insertion.Before(<span class="reserved">this</span>.table, 
                         <span class="literal">"&lt;div id='"</span>+<span class="reserved">this</span>.tableId+<span class="literal">"_container'&gt;"</span>+
                         <span class="literal">"&lt;div id='"</span>+<span class="reserved">this</span>.tableId+<span class="literal">"_scrollerdiv' style='float:right'&gt;&lt;/div&gt;"</span>);
    <span class="reserved">this</span>.table.previousSibling.appendChild(<span class="reserved">this</span>.table);
    new Insertion.Before(<span class="reserved">this</span>.table,<span class="literal">"&lt;div id='"</span>+<span class="reserved">this</span>.tableId+<span class="literal">"_viewport'&gt;&lt;/div&gt;"</span>);
    <span class="reserved">this</span>.table.previousSibling.appendChild(<span class="reserved">this</span>.table);
};


Rico.LiveGridScroller.<span class="reserved">prototype</span>.createScrollBar = <span class="reserved">function</span>() {
     var visibleHeight = <span class="reserved">this</span>.liveGrid.viewPort.visibleHeight();
     <span class="comment">// create the outer div...</span>
     <span class="comment">//this.scrollerDiv  = document.createElement("div");</span>
     <span class="reserved">this</span>.scrollerDiv  = $(<span class="reserved">this</span>.liveGrid.tableId + <span class="literal">"_scrollerdiv"</span>);
     var scrollerStyle = <span class="reserved">this</span>.scrollerDiv.style;
     scrollerStyle.borderRight = <span class="reserved">this</span>.liveGrid.options.scrollerBorderRight;
     scrollerStyle.position    = <span class="literal">"relative"</span>;
     scrollerStyle.float       = <span class="literal">"right"</span>;
     scrollerStyle.left        = <span class="reserved">this</span>.isIE ? <span class="literal">"-6px"</span> : <span class="literal">"-3px"</span>;
     scrollerStyle.width       = <span class="literal">"19px"</span>;
     scrollerStyle.height      = visibleHeight + <span class="literal">"px"</span>;
     scrollerStyle.overflow    = <span class="literal">"auto"</span>;

     <span class="comment">// create the inner div...</span>
     <span class="reserved">this</span>.heightDiv = document.createElement(<span class="literal">"div"</span>);
     <span class="reserved">this</span>.heightDiv.style.width  = <span class="literal">"1px"</span>;

     <span class="reserved">this</span>.heightDiv.style.height = parseInt(visibleHeight *
                       <span class="reserved">this</span>.metaData.getTotalRows()/<span class="reserved">this</span>.metaData.getPageSize()) + <span class="literal">"px"</span> ;
     <span class="reserved">this</span>.scrollerDiv.appendChild(<span class="reserved">this</span>.heightDiv);
     <span class="reserved">this</span>.scrollerDiv.onscroll = <span class="reserved">this</span>.handleScroll.bindAsEventListener(<span class="reserved">this</span>);

     var table = <span class="reserved">this</span>.liveGrid.table;
     <span class="comment">//table.parentNode.parentNode.insertBefore( this.scrollerDiv, table.parentNode.nextSibling );</span>
     var eventName = <span class="reserved">this</span>.isIE ? <span class="literal">"mousewheel"</span> : <span class="literal">"DOMMouseScroll"</span>;
     Event.observe(table, eventName, 
                   <span class="reserved">function</span>(evt) {
                           <span class="reserved">if</span> (evt.wheelDelta&gt;=0 || evt.detail &lt; 0) <span class="comment">//wheel-up</span>
                              <span class="reserved">this</span>.scrollerDiv.scrollTop -= (2*<span class="reserved">this</span>.viewPort.rowHeight);
                           <span class="reserved">else</span>
                              <span class="reserved">this</span>.scrollerDiv.scrollTop += (2*<span class="reserved">this</span>.viewPort.rowHeight);
                           <span class="reserved">this</span>.handleScroll(false);
                   }.bindAsEventListener(<span class="reserved">this</span>), 
                   false);
};


Rico.LiveGridSort.<span class="reserved">prototype</span>.addSortBehaviorToColumn = <span class="reserved">function</span>( n, cell ) {
      <span class="reserved">if</span> ( <span class="reserved">this</span>.options.columns[n].isSortable() ) {
         var link        = document.createElement(<span class="literal">"a"</span>);
         link.innerHTML  = cell.innerHTML + <span class="literal">'&lt;span id="'</span> + <span class="reserved">this</span>.headerTableId + <span class="literal">'_img_'</span> + n + <span class="literal">'"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;'</span>;
         link.id         = <span class="reserved">this</span>.headerTableId + <span class="literal">'_'</span> + n;
         cell.innerHTML = <span class="literal">""</span>;
         link.className  = <span class="literal">"da_columnTitle"</span>;
         link.onclick       = <span class="reserved">this</span>.headerCellClicked.bindAsEventListener(<span class="reserved">this</span>);
         var resizeHndlElem = document.createElement(<span class="literal">"span"</span>);
         resizeHndlElem.className = <span class="literal">"da_columnResizer"</span>;
         resizeHndlElem.innerHTML = <span class="literal">"|"</span>;
         cell.appendChild(resizeHndlElem);
         cell.appendChild(link);
      }
};
</pre>
	<hr>



<!-- ========== START OF NAVBAR ========== -->
<a name="navbar_top"><!-- --></a>
<table border="0" width="100%" cellpadding="1" cellspacing="0">
<tr>
<td colspan=2 bgcolor="#EEEEFF" class="NavBarCell1">
<a name="navbar_top_firstrow"><!-- --></a>
<table border="0" cellpadding="0" cellspacing="3">
  <tr align="center" valign="top">
  
  
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td>
  <td bgcolor="#FFFFFF" class="NavBarCell1Rev">	&nbsp;<font class="NavBarFont1Rev"><b>File</b></font>&nbsp;</td>
  

  <td bgcolor="#FFFFFF" class="NavBarCell1"> <font class="NavBarFont1">Class</font>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="overview-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="index-all.html"--><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td>
  <td bgcolor="#EEEEFF" class="NavBarCell1">    <a href="help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td>
  </tr>
</table>
</td>
<td bgcolor="#EEEEFF" align="right" valign="top"><em>
<b></b></em>
</td>
</tr>

<tr>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
&nbsp;PREV&nbsp;
&nbsp;NEXT</font></td>
<td bgcolor="white" class="NavBarCell2"><font size="-2">
  <a href="index.html" target="_top"><b>FRAMES</b></a>  &nbsp;
&nbsp;<a href="overview-summary.html" target="_top"><b>NO FRAMES</b></a>
&nbsp;&nbsp;
<script>
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html" TARGET=""><B>All Classes</B></A>');
  }
  //-->
</script>
<noscript>
<a href="allclasses-noframe.html" target=""><b>All Classes</b></a>
</noscript>
</font></td>
</tr>
</table>
<!-- =========== END OF NAVBAR =========== -->

<hr>
<font size="-1">

</font>
<div class="jsdoc_ctime">Documentation generated by <a href="http://jsdoc.sourceforge.net/" target="_parent">JSDoc</a> on Mon Mar 26 12:11:18 2007</div>
</body>
</html>
