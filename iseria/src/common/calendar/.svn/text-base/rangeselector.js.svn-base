/*
Copyright (c) 2008, DreamArts. All rights reserved.
TODO: message
version: ??
*/

/*for JSLINT undef checks*/
/*extern $ DA Element Prototype Ext*/

if (!DA) {
    throw "ERROR: missing DA.js or DA-min.js";
}
if (!DA.cal || !DA.cal.DateSelector) {
    throw "ERROR: missing common/calender/selector.js";
}

/**
 * A Composite widget that combines 2 DateSelector objects
 * to provide a date/time range selector.
 * @class DateRangeSelector
 * @extends Ext.Component
 * @param cfg {Object} Configuration options
 */
DA.cal.DateRangeSelector = Ext.extend(Ext.Component, {

    startConfig: {},

    endConfig: {},

    commonConfig: {},

    // Protected
    initComponent: function () {
        this.constructor.superclass.initComponent.call(this);
        this.addEvents(
            'change',
            'enabled',
            'disabled');

        // Create our 2 sub-widgets
        var startOptions = Ext.apply({}, this.startConfig, this.commonConfig);
        var endOptions = Ext.apply({}, this.endConfig, this.commonConfig);

        this.startDateSelector = new DA.cal.DateSelector(startOptions);
        this.endDateSelector = new DA.cal.DateSelector(endOptions);
        
        // Plumbing: (n) 配管工業
        this._setupEventPlumbing();
    },

    _setupEventPlumbing: function () {
        this.startDateSelector.on('change', this._handleOnStartDateChange, this);
        this.endDateSelector.on('change', this._handleOnEndDateChange, this);
    },

    _handleOnStartDateChange: function () {
        DA.customEvent.fire('dateRangeSelectorOnStartDateChangeBefore', this);
        this._handleCommonOnChange();
    },

    _handleOnEndDateChange: function () {
        DA.customEvent.fire('dateRangeSelectorOnEndDateChangeBefore', this);
        this._handleCommonOnChange();
    },

    _handleCommonOnChange: function () {
		var newDay;
        var day;
        var date = this.getValue();
        if (!this.startConfig.lite && !this.endConfig.lite) {
        	newDay = this._updateSelList(date.start, date.end);
        	date.start.dd = newDay.startDay;
        	date.end.dd = newDay.endDay;
		} else {
			day = new Date(date.start.yy, date.start.mm, 0).getDate();
			if (date.start.dd > day) {
				date.start.dd = day;
			}
			day = new Date(date.end.yy, date.end.mm, 0).getDate();
			if (date.end.dd > day) {
				date.end.dd = day;
			}
		}
		date.end.mi = this._checkEndHH(date.end);
        
        // TODO: Cache previous results, and fire the event
        //       only if the current values differ
        this.fireEvent('change', date.start, date.end);
    },
    
    changeWithoutFireEvent: function () {
        var date = this.getValue();
		this._checkEndHH(date.end);
    },
    
    _checkEndHH: function (endTime) {
    	var endHH = String(endTime.hh);
    	var endMI = String(endTime.mi);
    	if (!this.startConfig.lite && !this.endConfig.lite) {
			if (endHH === "24") {
				this.endDateSelector.miSelector.setValue("00");
				this.endDateSelector.miSelector.setDisable(true);
				this.endDateSelector.miSelector.setEditable(false);
				endMI = 0;
			} else if (endHH === "undefined" || endHH === "--") {
				this.endDateSelector.miSelector.setValue("--");
				this.endDateSelector.miSelector.setDisable(true);
				this.endDateSelector.miSelector.setEditable(false);
				endMI = 0;
			} else {
				if (!this.endDateSelector.hhSelector.isDisable()) {
					this.endDateSelector.miSelector.setDisable(false);
					this.endDateSelector.miSelector.setEditable(true);
				}
			}
    	} else {
    		if (endHH === "24") {
				this.endDateSelector.miSelector.setValue("00");
				this.endDateSelector.miSelector.disable();
				endMI = 0;
			} else if (endHH === "undefined" || endHH === "--") {
				this.endDateSelector.miSelector.setValue("--");
				this.endDateSelector.miSelector.disable();
				endMI = 0;
			} else {
				if (!this.endDateSelector.hhSelector.isDisable()) {
					this.endDateSelector.miSelector.enable();
				}
			}
    	}
    	return endMI;
    },

    setValue: function (start, end, fireEvents) {
        this.startDateSelector.setValue(start || {});
        this.endDateSelector.setValue(end || {});
        if (fireEvents === true) {
            this._handleCommonOnChange();
        }
    },
    
	getValue: function () {
		var startVal = this.startDateSelector.getValue();
        var endVal = this.endDateSelector.getValue();
        return ({
        	start: startVal,
        	end: endVal
        });
	},
	
    _updateSelList: function (start, end) {
    	start.dd = this.startDateSelector.updateDayList(start);
    	end.dd = this.endDateSelector.updateDayList(end);
    	return ({
        	startDay: start.dd,
        	endDay: end.dd
        });
    }

    // The following methods are autogenerated:

    /**
     * @public
     * @method enableStartDate
     */
    /**
     * @public
     * @method enableStartTime
     */
    /**
     * @public
     * @method enableEndDate
     */
    /**
     * @public
     * @method enableEndTime
     */
    /**
     * @public
     * @method disableStartDate
     */
    /**
     * @public
     * @method disableStartTime
     */
    /**
     * @public
     * @method disableEndDate
     */
    /**
     * @public
     * @method disableEndTime
     */

    /**
     * @public
     * @method enableDate
     */
    /**
     * @public
     * @method enableTime
     */
    /**
     * @public
     * @method disableDate
     */
    /**
     * @public
     * @method disableTime
     */


});

// Dynamically generate methods:
// DA.cal.DateRangeSelector.prototype.
//   {enable|disable}{Start|End}{Date|Time}
(function () {
    
var verbs = ['enable', 'disable'];
var adjectives = ['Start', 'End'];
var nouns = ['Date', 'Time'];

var proto = DA.cal.DateRangeSelector.prototype;

verbs.each(function (verb) {
    adjectives.each(function (adjective) {
        nouns.each(function (noun) {
            var method = verb + adjective + noun;
            var selectorName = adjective.charAt(0).toLowerCase() + 
                    adjective.substr(1) + 'DateSelector';
            // Generate methods:
            /* DA.cal.DateRangeSelector.prototype.{enable|disable}{Start|End}{Date|Time}
             *   = function () {
             *      var selector = this.{start|end}DateSelector;
             *      var f = selector.{enable|disable}{Time|Date};
             *      // ...
             *   };
             */
            proto[method] = function () {
                var selector = this[selectorName];
                if (!selector) { return; }
                var f = selector[verb+noun];
                // f is a reference to {enable|disable}{Date|Time}
                if (f) { 
                    f.call(selector);
                    // fire an event: "enable"+"d",  or "disable"+"d"
                    this.fireEvent(verb+'d', adjective, noun);
                }
            };
            // Generate wrapper methods:
            /* DA.cal.DateRangeSelector.prototype.{enable|disable}{Date|Time}
             */ 
            proto[verb+noun] = function () {
                var f = this[verb+'Start'+noun];
                if (f) { f.call(this); }
                f = this[verb+'End'+noun];
                if (f) { f.call(this); }
            };
        });
    });
});


})();

